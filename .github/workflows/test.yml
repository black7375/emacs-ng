name: CI

on: [push, pull_request]

jobs:
    unix-test:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, macos-latest]

        steps:
            - uses: actions/checkout@v2

            - name: rust setup
              run: |
                  rustup install $(cat rust-toolchain)
                  rustup component add rustfmt-preview

            - name: rust cache
              uses: actions/cache@v2
              with:
                  path: |
                    ~/.cargo/registry/cache
                    ~/.cargo/git
                    ./rust_src/target
                  key: ${{ runner.os }}-build-${{ hashFiles('**/rust-toolchain', '**/Cargo.toml*', '**/rustfmt.toml') }}

            - name: c cache
              uses: hendrikmuhs/ccache-action@v1
              with:
                  key: ${{ runner.os }}-build-ccache

            - name: Install dependencies on Linux
              if: runner.os == 'Linux'
              run: |
                  sudo apt install -y build-essential texinfo libx11-dev libxpm-dev libjpeg-dev libpng-dev libgif-dev libtiff-dev libgtk2.0-dev libncurses-dev automake autoconf libgnutls28-dev zlib1g-dev libgccjit-9-dev

            - name: Install dependencies on macOS
              if: runner.os == 'macOS'
              run: |
                  brew install gnutls texinfo autoconf
                  # libx11 libxpm jpeg libpng giflib libtiff gtk+3 ncurses libgccjit

                  # https://github.com/memkind/memkind/issues/33
                  alias nproc="sysctl -n hw.logicalcpu"

            - name: rustfmt
              run: |
                  # Configure $PATH: Executables are installed to $HOME/bin
                  export PATH="$HOME/bin:$PATH"

                  ./autogen.sh && ./configure --without-makeinfo --with-x=no --with-ns=no --without-gconf --without-gsettings
                  admin/format-rust.sh

            - name: build
              run: |
                  export CARGO_INCREMENTAL=0
                  export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
                  ./autogen.sh && RUSTFLAGS="-Dwarnings" WERROR_CFLAGS='-Werror -Wno-error=deprecated-declarations' CFLAGS=' -g' CXXFLAGS=' -g'
                  ./configure --enable-checking=glyphs --enable-rust-debug

                  # Avoid lisp compile && make info.
                  # lib -> lib-src -> src -> lisp -> info
                  make -j$((`nproc`+1)) src

                  ## Reduce Cache
                  # Note that all of the above need to be repeated for `release/` instead of
                  # `debug/` if your build script builds artifacts in release mode.
                  # https://bheisler.github.io/post/efficient-use-of-travis-ci-cache-for-rust/
                  # Delete loose files in the debug directory
                  find ./rust_src/target/debug -maxdepth 1 -type f -delete
                  # Delete just meta data
                  rm -f  ./rust_src/target/.rustc_info.json

            - name: js fmt
              run: |
                  cd test/js/
                  ../../src/emacs --batch --eval '(deno "fmt" "--check")'
                  cd ../../rust_src/src
                  ../../src/emacs --batch --eval '(deno "fmt" "--check")'
                  cd ../../

            - name: run js tests
              run: |
                  cd test/js/
                  ../../src/emacs --batch --eval '(deno "test" "main.js" "--allow-read" "--allow-write")'
