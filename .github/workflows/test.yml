name: CI

on: [push, pull_request]

jobs:
    unix-test:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, macos-latest]
                build: [general, webrender]

        steps:
            - uses: actions/checkout@v2

            - name: rust setup
              id: rust-setup
              run: |
                  rustup install $(cat rust-toolchain)
                  rustup component add rustfmt-preview
                  echo "::set-output name=week::$(/bin/date -u '+%Yy_%mm_%Ww')"
                  echo "::set-output name=date::$(/bin/date)"

            - name: rust cache
              uses: actions/cache@v2
              with:
                  path: |
                      ~/.cargo/registry/cache
                      ~/.cargo/git
                      ./rust_src/target
                  key: ${{ runner.os }}-${{ matrix.build }}-rust-${{ hashFiles('**/rust-toolchain', '**/Cargo.toml*', '**/rustfmt.toml') }}-${{ steps.rust-setup.outputs.week }}
                  restore-keys: |
                      ${{ runner.os }}-${{ matrix.build }}-rust-${{ hashFiles('**/rust-toolchain', '**/Cargo.toml*', '**/rustfmt.toml') }}-${{ steps.rust-setup.outputs.week }}
                      ${{ runner.os }}-${{ matrix.build }}-rust-${{ hashFiles('**/rust-toolchain', '**/Cargo.toml*', '**/rustfmt.toml') }}-
                      ${{ runner.os }}-${{ matrix.build }}-rust

            - name: build cache
              uses: hendrikmuhs/ccache-action@v1
              with:
                  key: ${{ runner.os }}-${{ matrix.build }}-ccache

            - name: Install dependencies on Linux
              if: runner.os == 'Linux'
              run: |
                  ## Package Install
                  sudo apt install -y libxpm-dev libgtk2.0-dev libgif-dev libgnutls28-dev clang llvm lld ninja-build
                  # Already installed: automake autoconf texinfo libjpeg-dev libpng-dev libtiff-dev libx11-dev  libncurses-dev zlib1g-dev
                  # When use native-comp: libgccjit-9-dev
                  # When use gcc: build-essential

                  ## Setup Env
                  export LD="lld"
                  export AR="llvm-ar"
                  export AS="llvm-as"
                  export RANLIB="llvm-ranlib"
                  export CFLAGS=" -fuse-ld=lld"
                  export CXXFLAGS=" -fuse-ld=lld"
                  export RUSTFLAGS=" -Clink-arg=-fuse-ld=lld"

            - name: Install dependencies on macOS
              if: runner.os == 'macOS'
              run: |
                  ## Package Install
                  brew install texinfo automake ninja
                  # Already intalled: gnutls autoconf llvm
                  # Option: libx11 libxpm jpeg libpng giflib libtiff gtk+3 ncurses
                  # When use native-comp: libgccjit

                  ## Install zld
                  # brew insall michaeleisel/zld/zld
                  # /usr/local/bin/zld
                  # https://afnan.io/posts/2018-10-01-using-the-latest-llvm-release-on-macos/
                  # https://steipete.com/posts/zld-a-faster-linker/
                  mkdir $HOME/bin
                  cd $HOME/bin
                  curl -fLO https://github.com/michaeleisel/zld/releases/latest/download/zld.tar.xz
                  gtar --verbose -xf ./zld.tar.xz

                  # export PATH="/usr/local/opt/llvm/bin:$PATH"
                  export CPLUS_INCLUDE_PATH=$(/usr/local/opt/llvm/bin/llvm-config --includedir):$CPLUS_INCLUDE_PATH
                  export LD_LIBRARY_PATH=$(/usr/local/opt/llvm/bin/llvm-config --libdir):$LD_LIBRARY_PATH
                  export LD="$HOME/bin/zld"
                  export AR="/usr/local/opt/llvm/bin/llvm-ar"
                  export AS="/usr/local/opt/llvm/bin/llvm-as"
                  export RANLIB="/usr/local/opt/llvm/bin/llvm-ranlib"
                  export CFLAGS=" -fuse-ld=$HOME/bin/zld -march=native"
                  export CXXFLAGS=" -fuse-ld=$HOME/bin/zld -march=native"
                  export RUSTFLAGS=" -Clink-arg=-fuse-ld=$HOME/bin/zld -Csplit-debuginfo=unpacked -Ctarget-cpu=native"
                  export OTHER_LDFLAGS=" -fuse-ld=$HOME/bin/zld"
                  # export LDFLAGS="-L/usr/local/Cellar/libgccjit/10.2.0_1/lib/gcc/10"

                  ## nproc for mac
                  # https://github.com/memkind/memkind/issues/33
                  alias nproc="sysctl -n hw.logicalcpu"

            - name: zld cache(for mac)
              if: runner.os == 'macOS'
              uses: actions/cache@v2
              with:
                  path: /tmp/zld-*
                  key: ${{ runner.OS }}-${{ matrix.build }}-zld-${{ steps.rust-setup.outputs.date }}
                  restore-keys: |
                      ${{ runner.OS }}-${{ matrix.build }}-zld-${{ steps.rust-setup.outputs.date }}
                      ${{ runner.OS }}-${{ matrix.build }}-zld-

            - name: rustfmt && env set
              run: |
                  # Configure $PATH: Executables are installed to $HOME/bin
                  export PATH="$HOME/bin:$PATH"

                  ./autogen.sh && ./configure --without-makeinfo --with-x=no --with-ns=no --without-gconf --without-gsettings --without-native-compilation
                  admin/format-rust.sh

                  ## Set env
                  # Path Set
                  export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"

                  echo "==================0"
                  which clang
                  echo "$CC"
                  # Compile with clang
                  export CC="clang"
                  export CXX="clang++"
                  export CPP="clang -E"

                  # Other Flags
                  export CARGO_INCREMENTAL=0
                  export RUSTFLAGS="-Zshare-generics=y -Cdebuginfo=1 $RUSTFLAGS"
                  # -Copt-level=1 -Ctarget-cpu=native
                  # export CFLAGS="-g1 $CFLAGS"
                  # export CXXFLAGS="-g1 $CXXFLAGS"
                  # -march=native

                  # Options used before
                  # RUSTFLAGS="-Dwarnings"
                  # export WERROR_CFLAGS="-Werror -Wno-error=deprecated-declarations"

            - name: configure(general)
              if: ${{ matrix.build == 'general' }}
              run: |
                  echo "==================1"
                  which clang
                  echo "$CC"
                  ./configure --enable-checking=glyphs --enable-rust-debug
                  # --enable-autodepend

            - name: configure(webrender)
              if: ${{ matrix.build == 'webrender' }}
              run: |
                  echo "==================1"
                  which clang
                  echo "$CC"
                  ./configure --enable-checking=glyphs --enable-rust-debug --with-webrender
                  # --enable-autodepend

            - name: build
              run: |
                  echo "==================2"
                  which clang
                  echo "$CC"
                  make -j$((`nproc`+1)) src

                  # Note that all of the above need to be repeated for `release/` instead of
                  # `debug/` if your build script builds artifacts in release mode.
                  # https://bheisler.github.io/post/efficient-use-of-travis-ci-cache-for-rust/
                  # Delete loose files in the debug directory
                  find ./rust_src/target/debug -maxdepth 1 -type f -delete
                  # Delete just meta data
                  rm -f  ./rust_src/target/.rustc_info.json

            - name: js fmt
              run: |
                  cd test/js/
                  ../../src/emacs --batch --eval '(deno "fmt" "--check")'
                  cd ../../rust_src/src
                  ../../src/emacs --batch --eval '(deno "fmt" "--check")'
                  cd ../../

            - name: run js tests
              run: |
                  cd test/js/
                  ../../src/emacs --batch --eval '(deno "test" "main.js" "--allow-read" "--allow-write")'
