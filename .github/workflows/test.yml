name: CI

on: [push, pull_request]

jobs:
    unix-test:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, macos-latest]

        steps:
            - uses: actions/checkout@v2

            - name: rust setup
              run: |
                  rustup install $(cat rust-toolchain)
                  rustup component add rustfmt-preview

            - name: rust cache
              uses: actions/cache@v2
              with:
                  path: |
                    ~/.cargo/registry/cache
                    ~/.cargo/git
                    ./rust_src/target
                  key: ${{ runner.os }}-build-${{ hashFiles('**/rust-toolchain', '**/Cargo.toml*', '**/rustfmt.toml') }}-test2

            - name: build cache
              uses: hendrikmuhs/ccache-action@v1
              with:
                  key: ${{ runner.os }}-build-ccache

            - name: Install dependencies on Linux
              if: runner.os == 'Linux'
              run: |
                  sudo apt install -y texinfo libx11-dev libxpm-dev libjpeg-dev libpng-dev libgif-dev libtiff-dev libgtk2.0-dev libncurses-dev automake autoconf libgnutls28-dev zlib1g-dev libgccjit-9-dev clang llvm lld make
                  # build-essential

                  export AR="llvm-ar"

            - name: Install dependencies on macOS
              if: runner.os == 'macOS'
              run: |
                  brew install gnutls texinfo automake autoconf llvm
                  # llvm --with-clang --with-lld
                  # libx11 libxpm jpeg libpng giflib libtiff gtk+3 ncurses
                  export CPLUS_INCLUDE_PATH=$(llvm-config --includedir):$CPLUS_INCLUDE_PATH
                  export LD_LIBRARY_PATH=$(llvm-config --libdir):$LD_LIBRARY_PATH

                  # https://github.com/memkind/memkind/issues/33
                  alias nproc="sysctl -n hw.logicalcpu"

                  export PATH="/usr/local/opt/llvm/bin:$PATH"
                  # https://steipete.com/posts/zld-a-faster-linker/

            - name: rustfmt
              run: |
                  # Configure $PATH: Executables are installed to $HOME/bin
                  export PATH="$HOME/bin:$PATH"

                  ./autogen.sh && ./configure --without-makeinfo --with-x=no --with-ns=no --without-gconf --without-gsettings --without-native-compilation
                  admin/format-rust.sh

            - name: build
              run: |
                  export CARGO_INCREMENTAL=0
                  export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
                  # which clang
                  # which clang++
                  # which lld
                  ./autogen.sh
                  # echo "CC: $CC"
                  # echo "LD: $LD"

                  # Compile with clang
                  echo "Compile with clang"
                  export CC="clang"
                  export CXX="clang++"
                  export CPP="clang -E"
                  export LD="lld"
                  export AS="llvm-as"
                  export RANLIB="llvm-ranlib"
                  export CCFLAGS+=" -fuse-ld=lld"
                  export CXXFLAGS+=" -fuse-ld=lld"
                  # echo "CC: $CC"
                  # echo "LD: $LD"

                  # Debug Flags
                  # echo "Debug Process"
                  # export RUSTFLAGS="-Dwarnings -Zshare-generics=y -Cdebuginfo=1 -Clink-arg=-fuse-ld=lld"
                  # export WERROR_CFLAGS="-Werror -Wno-error=deprecated-declarations"
                  # export CFLAGS=" -O0 -g"
                  # export CXXFLAGS=" -O0 -g"
                  # export CARGO_FLAGS=" -Copt-level=0"

                  echo "Configure Process"
                  ./configure --enable-checking=glyphs --enable-rust-debug
                  # --enable-autodepend
                  # echo "CC: $CC"
                  # echo "LD: $LD"
                  echo "nproc: $((`nproc`+1))"
                  make -j$((`nproc`+1)) src

                  ## Reduce Cache
                  # Note that all of the above need to be repeated for `release/` instead of
                  # `debug/` if your build script builds artifacts in release mode.
                  # https://bheisler.github.io/post/efficient-use-of-travis-ci-cache-for-rust/
                  # Delete loose files in the debug directory
                  find ./rust_src/target/debug -maxdepth 1 -type f -delete
                  # Delete just meta data
                  rm -f  ./rust_src/target/.rustc_info.json

            - name: js fmt
              run: |
                  cd test/js/
                  ../../src/emacs --batch --eval '(deno "fmt" "--check")'
                  cd ../../rust_src/src
                  ../../src/emacs --batch --eval '(deno "fmt" "--check")'
                  cd ../../

            - name: run js tests
              run: |
                  cd test/js/
                  ../../src/emacs --batch --eval '(deno "test" "main.js" "--allow-read" "--allow-write")'
